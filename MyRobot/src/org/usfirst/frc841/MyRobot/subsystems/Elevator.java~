// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc841.MyRobot.subsystems;

import org.usfirst.frc841.MyRobot.RobotMap;
import org.usfirst.frc841.MyRobot.commands.*;
import org.usfirst.frc841.lib.*;

import java.util.Timer;
import java.util.TimerTask;

import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Elevator extends Subsystem {
	
	

  	private double Y[] = {0,0,0,0};
  	private double X[] = {-1,0,1,10};
  	private int period = 100; //mSec 
  	private double kp = 1.7; // P
  	private double ki = 0.01; // I
  	private double kd = 0.07; // D
  	private double Setpoint = 3.25; //goal
  	private boolean EnablePID = false; // PID loop enable 
  	private boolean reachDestination = false; // PID within range
  	private double upperlimit = 4.5;
  	private double lowerlimit = 0.0;
  	private boolean isManualMode = false;
  	 Timer ControllerTimer;
  	 PIDLoop cloop;
    
     
     //Creates a new timer at the desired time
     public Elevator(){
    	 
    	 cloop = new PIDLoop(X,Y);
    	 cloop.SetControllerDirection(true);
    	 cloop.SetOutputLimits(-1, 1);
    	 cloop.SetSampleTime((long) period);
    	 cloop.SetReference(Setpoint);
    	 cloop.SetTunings(kp, ki, kd);// PID Tuning values
    	 
    	 
    	 ControllerTimer = new Timer();
    	 ControllerTimer.schedule(new Update(this), 0L, period); // schedule PID
     }
     
     class Update extends TimerTask{
    	 private Elevator elevator;
    	
    	 public Update(Elevator elevator){
    		 this.elevator = elevator;    	 
    	    	}
    	    	
    			@Override
    			public void run() {
    				// TODO Auto-generated method stub
    				double input = elevator.getHeight();
    				//Implements PID Loop
    				if (elevator.EnablePID){
    					elevator.cloop.SetTunings(elevator.kp,elevator.ki,elevator.kd);
    					elevator.cloop.SetReference(Setpoint);
    					elevator.setMotors(elevator.cloop.Compute(input));
    					
    					if ( Math.abs(Setpoint - input) < Math.abs(Setpoint* 0.15) ){
    						reachDestination = true;
    					}
    				
    				}
   
    			}
     	}
     public void updatePIDValues(double _kp,double _ki, double _kd){
     	kp = _kp;
     	ki = _ki;
     	kd = _kd;
     }
     public void enableControlLoop(){
     	EnablePID = true;
     }
     public void disableControlLoop(){
     	EnablePID = false;
     }
     public void SetGoal(double goal){
     	reachDestination = false;
     	Setpoint = goal;
		EnablePID = true;
     		
     }
     public boolean isReachDestination() {
     	return reachDestination;
     }
     
    

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_VictorSPX lift1 = RobotMap.elevatorLift1;
    private final WPI_VictorSPX lift2 = RobotMap.elevatorLift2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
   
    	
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
	public double getHeight() {
		return 0;
	}
	
	public void setMotors(double speed) {
		lift1.set(speed);
		lift2.set(speed);
	}
    

}

