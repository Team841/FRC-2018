// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc841.MyRobot.subsystems;

import org.usfirst.frc841.lib.*;
import org.usfirst.frc841.lib.PID.PIDControlLoop;
import org.usfirst.frc841.MyRobot.RobotMap;
import org.usfirst.frc841.MyRobot.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.SensorCollection;
import com.ctre.phoenix.motorcontrol.can.*;
import com.ctre.phoenix.motorcontrol.can.TalonSRX;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Claw extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final DigitalInput hallEffect = RobotMap.clawHallEffect;
    private final DoubleSolenoid deathGrip = RobotMap.clawDeathGrip;
    private final WPI_TalonSRX elbow = RobotMap.clawElbow;
    private final DoubleSolenoid clawActuator = RobotMap.clawClawActuator;
    private final DigitalInput grabSensor = RobotMap.clawGrabSensor;
    private final WPI_VictorSPX rightSuck = RobotMap.clawRightSuck;
    private final WPI_VictorSPX leftSuck = RobotMap.clawLeftSuck;
    private final DigitalInput cubeSensor = RobotMap.clawCubeSensor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public boolean lastgrabsensor = true;
    public boolean lastcubesensor= true;
    private boolean enableautograb = false;
    
    public Claw.CLoop ploop;
    
    double x[] = {1,2,3};
    double y[] = {0,0,0};
    private double period = 0.1;
    private double zero;
    //constructor
    public Claw() {
    ploop = new Claw.CLoop(this, this.x,this.y, (long) Math.abs(this.period*100));
    ploop.SetOutputLimits(-1, 1);
    ploop.setTunings(C.c_p, C.c_i, C.c_d);
    this.zero = elbow.getSensorCollection().getPulseWidthPosition();
    this.zero = 2850- this.zero;
    
    //ploop.updateSetpoint(3200);
    }
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new UpdateClaw());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    public void suckIn() {
    	leftSuck.set(C.WheelInTakeSpeed_IntakeSpeed);
    	rightSuck.set (C.WheelInTakeSpeed_IntakeSpeed);
    }
    public void stopSuck() {
    	leftSuck.set(C.WheelInTakeSpeed_StopSpeed);
    	rightSuck.set(C.WheelInTakeSpeed_StopSpeed);
    }
   public void spitOut() {
   		leftSuck.set(C.WheelInTakeSpeed_SpitSpeed);
   		rightSuck.set(C.WheelInTakeSpeed_SpitSpeed);
   }
   public void openClaw() {
	   clawActuator.set(DoubleSolenoid.Value.kReverse);
   }
   public void closeClaw() {
	   clawActuator.set(DoubleSolenoid.Value.kForward);
	   
   }
   public void setDeathGrip(boolean Set) {
	   if(Set) {
		   deathGrip.set(DoubleSolenoid.Value.kForward);
	   }
	   else {
		   deathGrip.set(DoubleSolenoid.Value.kReverse);
	   }
   }
   
   public boolean isGrab() {
	   return grabSensor.get();
	   
   }
   
   public boolean isCubeGot() {
	   return cubeSensor.get();
	   
   }
   
   public void enableGrab() {
	   this.enableautograb = true;
   }
   public void disableGrab() {
	   this.enableautograb = false;
	   this.lastgrabsensor = true;
	   this.lastcubesensor = true;
   }
   
   public boolean isAutoGrab() {
	   return this.enableautograb;
   }
   
   
   public double getAngle() {
	  return (double) (elbow.getSensorCollection().getPulseWidthPosition()-C.c_offset+this.zero);
   }
   public void setElbowPower(double power) {
	   elbow.set(-power);
   }
   
   
   public void zeroElbow() {
	   
	   
	   SensorCollection lim =   elbow.getSensorCollection();
	   SmartDashboard.putNumber("Abs Angle", this.getAngle());
	   SmartDashboard.putNumber("Elbow Quad", lim.getQuadraturePosition());
	   SmartDashboard.putNumber("Power", elbow.get());
	   //this.ploop.updateSetpoint(C.claw_mid);
	   //this.ploop.enablePID();
	   
	   //this.ploop.updateSetpoint(3000);
	 // elbow.set(ControlMode.Position, 5  5000);
	   
	   
	   //if(lim.isFwdLimitSwitchClosed()) {
		//   elbow.setSelectedSensorPosition(0, 0, 10);
	   //}
   }
   	
   
   /**
	 * This Class links the Intakes Control loop to the subsystem
	 *
	 */
	public class CLoop extends PIDControlLoop {
		Claw subsystem;

		public CLoop(Claw subsystem, double[] X, double[] Y, long SampleTime) {
			super(X, Y, SampleTime);
			this.subsystem = subsystem;
			// TODO Auto-generated constructor stub
		}

		@Override
		public void setOutput(double value) {
			subsystem.setElbowPower(value);
			;
			// System.out.println("Output: " + value);
		}

		@Override
		public double getSensorReading() {
			// System.out.println("in: " + subsystem.getUpperWheelSpeed());
			return subsystem.getAngle();
		}
		@Override
		public void update() {
		//	SmartDashboard.putString("DB/String 2",
		//			"Angle: " + Math.floor(this.subsystem.getAngle() * 100 / 100.0));
			//SmartDashboard.putNumber ("Angle",this.subsystem.getCurrentAngle ());
		}
	}
   
}

