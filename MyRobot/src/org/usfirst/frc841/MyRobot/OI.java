// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc841.MyRobot;

import org.usfirst.frc841.MyRobot.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

import org.usfirst.frc841.MyRobot.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton quickturn;
    public JoystickButton stopQuickTurn;
    public Joystick driver;
    public JoystickButton clawMoveOut;
    public JoystickButton score1;
    public JoystickButton clawClose;
    public JoystickButton clawOpem;
    public JoystickButton spitOut;
    public JoystickButton downClaw;
    public JoystickButton putIntakeInPostion;
    public Joystick coPilot;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        coPilot = new Joystick(1);
        
        putIntakeInPostion = new JoystickButton(coPilot, 2);
        putIntakeInPostion.whenPressed(new PutClawInPixelIntakePosition());
        downClaw = new JoystickButton(coPilot, 1);
        downClaw.whenPressed(new BringClawDown());
        spitOut = new JoystickButton(coPilot, 10);
        spitOut.whileHeld(new SetIntakes(2));
        clawOpem = new JoystickButton(coPilot, 5);
        clawOpem.whenPressed(new OpenClaw());
        clawClose = new JoystickButton(coPilot, 6);
        clawClose.whenPressed(new CloseClaw());
        score1 = new JoystickButton(coPilot, 3);
        score1.whileHeld(new ScoreOnSwitch());
        clawMoveOut = new JoystickButton(coPilot, 4);
        clawMoveOut.whenPressed(new MoveClawOut());
        driver = new Joystick(0);
        
        stopQuickTurn = new JoystickButton(driver, 6);
        stopQuickTurn.whenReleased(new StopQuickTurn());
        quickturn = new JoystickButton(driver, 6);
        quickturn.whenPressed(new QuickTurn());


        // SmartDashboard Buttons
        SmartDashboard.putData("EncoderTurn,Left", new EncoderTurn(2,0.1,true));
        SmartDashboard.putData("TurnToDistance", new TurnToDistance());
        SmartDashboard.putData("AutoSelect", new AutoSelect());
        SmartDashboard.putData("AutoSwitchScore", new AutoSwitchScore());
        SmartDashboard.putData("PutClawInPixelIntakePosition", new PutClawInPixelIntakePosition());
        SmartDashboard.putData("OpenClaw", new OpenClaw());
        SmartDashboard.putData("CloseClaw", new CloseClaw());
        SmartDashboard.putData("LowScore", new LowScore());
        SmartDashboard.putData("BringClawDown", new BringClawDown());
        SmartDashboard.putData("ScoreOnSwitch", new ScoreOnSwitch());
        SmartDashboard.putData("QuickTurn", new QuickTurn());
        SmartDashboard.putData("StopQuickTurn", new StopQuickTurn());
        SmartDashboard.putData("EngageAutoGrab", new EngageAutoGrab());
        SmartDashboard.putData("DisengageAutoGrab", new DisengageAutoGrab());
        SmartDashboard.putData("MoveClawOut", new MoveClawOut());
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Drive", new Drive());
        SmartDashboard.putData("AutoTimeDrive", new AutoTimeDrive());
        SmartDashboard.putData("UpdateClaw", new UpdateClaw());
        SmartDashboard.putData("SetClawAngle: Low", new SetClawAngle(3260));
        SmartDashboard.putData("SetClawAngle: Mid", new SetClawAngle(5093));
        SmartDashboard.putData("SetClawAngle: High", new SetClawAngle(6660));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriver() {
        return driver;
    }

    public Joystick getCoPilot() {
        return coPilot;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
