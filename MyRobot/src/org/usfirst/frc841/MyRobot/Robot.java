// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc841.MyRobot;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc841.MyRobot.commands.*;
import org.usfirst.frc841.MyRobot.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static Climber climber;
    public static Elevator elevator;
    public static Claw claw;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        climber = new Climber();
        elevator = new Elevator();
        claw = new Claw();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
       
       
       
        
        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.addObject("AutoSwitchScore", new AutoSwitchScore());
        chooser.addDefault("AutoTimeDrive", new AutoTimeDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        
        
      //  SmartDashboard.putData("Auto mode", chooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
    	
       	String data = "XXX"; //Our empty 
        
       	/*
       	 * TO CHECK THE DATA PROVIDED BY THE FIELD
       	 * SCORE ON LEFT OR IN RIGHT.
       	 */
       	
       	try
       	{
       		data = DriverStation.getInstance().getGameSpecificMessage();
       	}
       	catch(Exception e)
       	{
       		System.out.println(e);
       		data = "XXX";
       	}
       	
       	//DRIVE STRAIGHT AND DO NOT TRY TO SCORE, WE DO NOT NEED TO CHECK THE INPUT OF THE FIELD
       	if(Robot.driveTrain.getAutoSelect()== 0) {
       		chooser.addDefault("AutoTimeDrive", new AutoTimeDrive());
       	}
       	//DRIVE STRAIGTH AND SCORE IN THE MIDDLE, WE DO NEED TO CHECK THE INPUT TO ROTATE TO LEFT OR RIGHT
       	else if(Robot.driveTrain.getAutoSelect()== 3) {
       		if(data.charAt(0)=='L') {
       			chooser.addDefault("MiddleLeftAuto", new MiddleLeftAuto());
       		}
       		else if(data.charAt(0)=='R') {
       			chooser.addDefault("MiddleRightAuto", new MiddleRightAuto());
       		}
       		else {
       			chooser.addDefault("AutoTimeDrive", new AutoTimeDrive());
       			//autonomousCommand = new AutoTimeDrive();
	
       		}
       	}
       	//DRIVE STRAIGTH AND SCORE ONLY IF WE ARE IN THE CORRECT ONE
       	else
       		if(data.charAt(0)=='L') && () {
       			chooser.addDefault("MiddleLeftAuto", new MiddleLeftAuto());
       		}
       		else if(data.charAt(0)=='R') {
       			chooser.addDefault("MiddleRightAuto", new MiddleRightAuto());
       		}
       		else {
       			chooser.addDefault("AutoTimeDrive", new AutoTimeDrive());
       			//autonomousCommand = new AutoTimeDrive();
	
       		}
       	}
       	

    	
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
  
    }
    
  
    
}
